<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.5" reference="ActiveDirectory.Code.Main" locale="">
  <web>ActiveDirectory.Code</web>
  <name>Main</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>ActiveDirectory.Code.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>Main</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity}}
#macro(displaySelectField $prop $default $configObj)
  #set ($className = $configObj.xWikiClass.name)
  #set ($value = $configDoc.getValue($prop.name))
  #if ($prop.classType == 'String' || $prop.classType == 'TextArea' || $prop.classType == 'Password')
    #set ($display = $configDoc.display($prop.name, 'edit', $configObj).replaceAll('(^..html.*?}})|(../html..$)', ''))
    #if ($mandatoryFields.contains($prop.name))
      #set ($display = $display.replace('&lt;input', '&lt;input required'))
    #end
    $display
  #else
    #set ($options = [])
    #if ($prop.classType == 'Boolean')
      #set ($discard = $options.add({'value': 1, 'label': 'yes'}))
      #set ($discard = $options.add({'value': 0, 'label': 'no'}))
    #else
      #foreach($v in $prop.listValues)
        #set ($discard = $options.add({'value': $v, 'label': "${className}_${prop.name}_${v}"}))
      #end
    #end
    &lt;select name="${className}_0_${prop.name}" id="${className}_0_${prop.name}"&gt;
      #foreach ($option in $options)
        &lt;option value="$option.value" #if($value == $option.value)selected="selected"#end&gt;
          $services.localization.render($option.label)
          #if ($default == $option.value)
            $services.localization.render('activeDirectory.default')
          #end
        &lt;/option&gt;
      #end
    &lt;/select&gt;
  #end
#end
#macro (displayMainForm)
  #set ($configClassName = 'XWiki.XWikiPreferences')
  #set ($configClass = $xwiki.getClass($configClassName))
  #set ($adConfigClassName = 'ActiveDirectory.Code.ActiveDirectoryConfigClass')
  #set ($adConfigClass = $xwiki.getClass($adConfigClassName))
  #set ($mandatoryFields = ['ldap_server', 'ldap_port', 'ldap_bind_DN', 'ldap_bind_pass', 'ldap_base_DN'])
  #set ($params = {
    'activeDirectoryConnection': {'ldap_server'    : '127.0.0.1',
                                  'ldap_port'      : '389',
                                  'ldap_bind_DN'   : '',
                                  'ldap_bind_pass' : ''},
    'activeDirectoryConfiguration' : {'ldap_base_DN'        : ''},
    'activeDirectoryConfigurationAdvanced' : {'ldap'                       : '1',
                                              'ldap_trylocal'              : '1',
                                              'ldap_UID_attr'              : 'sAMAccountName',
                                              'ldap_fields_mapping'        : '',
                                              'ldap_group_mapping'         : '',
                                              'ldap_user_group'            : '',
                                              'ldap_exclude_group'         : '',
                                              'ldap_update_user'           : '1',
                                              'ldap_update_photo'          : '0',
                                              'ldap_photo_attribute'       : 'thumbnailPhoto',
                                              'ldap_groupcache_expiration' : '21600',
                                              'ldap_mode_group_sync'       : 'always'}
  })
  ## TODO: Transform the maps from $params in arrays holding
  ## only property names when https://jira.xwikisas.com/browse/ADAPP-30 is implemented
  #set ($configDoc = $xwiki.getDocument('ActiveDirectory.Code.ActiveDirectoryConfig'))
  ## Create the config doc if it doesn't exist and set the default values defined above.
  #if ($configDoc.isNew())
    #set ($newConfigObj = $configDoc.newObject($configClassName))
    #foreach ($paramsSection in $params.entrySet())
      #foreach ($field in $paramsSection.value.entrySet())
        #if ("$!field.value" != '')
          #set ($discard = $newConfigObj.set($field.key, $field.value))
        #end
      #end
    #end
    #set ($newAdConfigObj = $configDoc.newObject($adConfigClassName))
    #set ($discard = $newAdConfigObj.set('ldap_ssl', 0))
    #set ($discard = $configDoc.setHidden(true))
    #set ($discard = $configDoc.save($services.localization.render('activeDirecfory.config.initializationComment'), 'true'))
  #end
  #set ($configObj = $configDoc.getObject($configClassName))
  #set ($adConfigObj = $configDoc.getObject($adConfigClassName))
  ## Backwards compatibility for versions that do not have the ActiveDirectoryConfigClass object.
  #if (!$adConfigObj)
    #set ($adConfigObj = $configDoc.newObject($adConfigClassName))
    #set ($discard = $configDoc.save())
  #end
  #if ("$!section" != '')
    #set ($discard = $xwiki.jsx.use('ActiveDirectory.Code.Main'))
    #set ($discard = $xwiki.ssx.use('ActiveDirectory.Code.Main'))
    {{info}}$services.localization.render('admin.activeDirectory.info'){{/info}}

    #set($formId = "${section.toLowerCase()}_${configClassName}")
    {{html clean="false"}}
      &lt;form id="$formId" method="post" action="$xwiki.getURL($configDoc, 'saveandcontinue')" onsubmit="cancelCancelEdit()" class="xform"&gt;
        #foreach ($paramsSection in $params.entrySet())
          #set ($fields = $paramsSection.value)
          #set ($sectionName = $paramsSection.key)
          &lt;fieldset class="$sectionName"&gt;
            ## If there is only one section, don't display the legend
            #if ($params.size() &gt; 1)
              &lt;legend&gt;$services.localization.render("admin.$sectionName")
                #if ($sectionName == 'activeDirectoryConfigurationAdvanced')
                  &lt;a id="advancedConfigShow"&gt;$services.localization.render('admin.activeDirectoryConfigurationAdvanced.show')&lt;/a&gt;
                  &lt;a id="advancedConfigHide"&gt;$services.localization.render('admin.activeDirectoryConfigurationAdvanced.hide')&lt;/a&gt;
                #end
              &lt;/legend&gt;
            #end
            &lt;dl&gt;
              #foreach ($field in $fields.entrySet())
                #set ($prop = $configClass.get($field.key))
                #set ($hint = $services.localization.render("${configObj.xWikiClass.name}_${prop.name}.hint"))
                &lt;dt&gt;
                  &lt;label for="${configClassName}_${configObj.number}_${prop.name}"&gt;$prop.translatedPrettyName&lt;/label&gt;
                  #if ($hint)&lt;span class="xHint"&gt;$hint&lt;/span&gt;#end
                &lt;/dt&gt;
                &lt;dd&gt;
                  #displaySelectField($prop $field.value $configObj)
                  ## TODO: when https://jira.xwikisas.com/browse/ADAPP-30 is implemented, replace $field.value
                  ## with the default taken from the script service
                &lt;dt&gt;
              #end
            &lt;/dl&gt;
            #if ($paramsSection.key.equals('activeDirectoryConnection'))
              ## Display SSL properties.
              &lt;dl&gt;
              #foreach ($prop in $adConfigClass.properties)
                #set ($hint = $services.localization.render("${adConfigObj.xWikiClass.name}_${prop.name}.hint"))
                &lt;dt&gt;
                  &lt;label for="${adConfigClassName}_${adConfigObj.number}_${prop.name}"&gt;$prop.translatedPrettyName&lt;/label&gt;
                  #if ("$!hint" != '')&lt;span class="xHint"&gt;$hint&lt;/span&gt;#end
                &lt;/dt&gt;
                &lt;dd&gt;
                  #displaySelectField($prop '0' $adConfigObj)
                &lt;dt&gt;
              #end
              &lt;/dl&gt;
              &lt;div id='checkConnection'&gt;
                &lt;button class='btn btn-primary'&gt;
                  $services.localization.render('activeDirectory.checkConnection')
                &lt;/button&gt;
                &lt;span class="xHint"&gt;$services.localization.render('activeDirectory.checkConnection.hint')&lt;/span&gt;
                &lt;div id="checkConnectionResponse"&gt;&lt;/div&gt;
              &lt;/div&gt;
            #end
          &lt;/fieldset&gt;
        #end
        #set ($redirectURL = $xwiki.getURL($currentDoc, 'admin', $escapetool.url({'editor': $editor, 'section': $section})))
        &lt;div class="hidden"&gt;
          &lt;input type="hidden" name="form_token" value="$services.csrf.token" /&gt;
          &lt;input type="hidden" name="xcontinue" value="$redirectURL" /&gt;
          &lt;input type="hidden" name="xredirect" value="$redirectURL" /&gt;
          &lt;input type="hidden" name="classname" value="$configClassName" /&gt;
        &lt;/div&gt;
        &lt;input class="button" type="submit" name="formactionsac" value="$services.localization.render('admin.save')" /&gt;
      &lt;/form&gt;
    {{/html}}
  #end
#end
##
#if ($services.ldap)
  #if (!$services.ldap.isLDAPAuth() &amp;&amp; "$!xcontext.getXWiki().getAuthService().getAuthService().getId()" != 'activedirectory' &amp;&amp; "$!xcontext.getXWiki().getAuthService().getId()" != 'activedirectory')
    {{warning}}
      #set ($authSectionURL = $xwiki.getURL('XWiki.XWikiPreferences', 'admin', $escapetool.url({'section' : 'Authentication'})))
      [[$services.rendering.escape($services.localization.render('activeDirectory.warning.ldapAuthenticationIsNotSet'), $xwiki.currentContentSyntaxId)>>path:$authSectionURL]]
    {{/warning}}

  #end
  #displayMainForm($configClassName)
  #if ("$!section" != '')
    {{html clean="false"}}
      &lt;fieldset class='activeDirectoryMiscellaneous'&gt;
        &lt;legend&gt;$services.localization.render('admin.activeDirectoryMiscellaneous')&lt;/legend&gt;
        &lt;span class="xHint"&gt;$services.localization.render('admin.activeDirectoryMiscellaneous.hint')&lt;/span&gt;
      &lt;/fieldset&gt;
      &lt;div id='resetGroupCache'&gt;&lt;button class='btn btn-primary'&gt;$services.localization.render('activeDirectory.resetGroupCache.submit')&lt;/button&gt;&lt;/div&gt;
      &lt;div class="box successmessage hidden"&gt;&lt;/div&gt;
    {{/html}}
  #end
#else
  {{error}}$services.localization.render('activeDirectory.error.missingLdapService'){{/error}}
#end
{{/velocity}}</content>
  <object>
    <name>ActiveDirectory.Code.Main</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>8061a1be-1e3c-4196-b246-a743f531f4f1</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <restricted>0</restricted>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>require(['jquery'], function($) {
  $(document).ready(function() {
    var feature = (function () {
      var textareaToInputList = function(textarea) {
        var content = textarea.val();
        var dataset = textarea.data();
        var separator = dataset.separator;
        var properties = content.split(separator);
        var textareaParent = textarea.parent();
        var propertiesParent = $('&lt;div class="properties"/&gt;');
        textareaParent.append(propertiesParent);
        $.each(properties, function(key, value) {
          createPropertyEntry(value, dataset, propertiesParent);
        });
        var addPropertyButton = $('&lt;span class="addProperty"/&gt;');
        addPropertyButton
          .html("${escapetool.javascript($services.localization.render('activeDirectory.newEntry.title'))}");
        textareaParent.append(addPropertyButton);
      };

      var createPropertyEntry = function(property, dataset, parent) {
        var propertyValues = property.split('=');
        var xWikiValue = propertyValues[0] || '';
        // The AD group value contains '=' so, in order to preserve it, replace the xWikiValue from the initial
        // property value.
        var aDValue = property.replace(xWikiValue + '=', '') || '';
        var xWikiInput = $('&lt;input/&gt;').attr({
          'type': 'text',
          'class': 'key',
          'value': xWikiValue,
          'placeholder': dataset.keyTip
        });
        var suggestQueryString = 'outputSyntax=plain&amp;list=xwiki-' + dataset.mappingTip;
        var xWikiInputSuggest = new XWiki.widgets.Suggest(xWikiInput.get(0), {
          'script': new XWiki.Document('SuggestLists', 'ActiveDirectory.Code').getURL('get', suggestQueryString),
          'varname': 'q',
          'noresults': 'No results',
          'json': true,
          'resultsParameter': 'results',
          'resultValue': 'value'
        });
        var aDInput = $('&lt;input/&gt;').attr({
          'type': 'text',
          'class': 'value',
          'value': aDValue.replaceAll('\\\\', '\\'),
          'placeholder': dataset.valueTip
        });
        var inputsWrapper = $('&lt;div class="property"/&gt;');
        var removePropertyButton = $('&lt;span class="removeProperty"/&gt;');
        inputsWrapper
          .append(xWikiInput)
          .append(' \u2192 ')
          .append(aDInput)
          .append(removePropertyButton);
        parent.append(inputsWrapper);
      };

      var bindPropertyEvents = function() {
        $('.activeDirectoryConfigurationAdvanced').on('click', '.removeProperty', function() {
          var property = $(this).parent();
          removeValueFromTextarea(property);
          property.remove();
        });
        $('.activeDirectoryConfigurationAdvanced').on('click', '.addProperty', function() {
          var textarea = $(this).siblings('textarea');
          var dataset = textarea.data();
          var propertiesParent = textarea.siblings('.properties');
          createPropertyEntry('', dataset, propertiesParent);
        });
        $('.activeDirectoryConfigurationAdvanced').on('focus', '.properties input', function() {
          var oldValue = $(this).val();
          // Make sure the old value is stored on the first focus on input.
          // In the case of suggestions, the focus on input can occur twice.
          if (typeof $(this).data('oldValue') == 'undefined') {
            $(this).data('oldValue', oldValue);
          }
        }).on('focusout', '.properties input', function() {
          // Make sure that half mappings are not accepted.
          if ($(this).val()) {
            $(this).siblings('input').prop('required', true);
          } else {
            $(this).siblings('input').prop('required', false);
          }
          updateValueInTextarea($(this));
        });
      };

      var updateValueInTextarea = function(input) {
        var textarea = input.parent().parent().siblings('textarea');
        var content = textarea.val();
        var separator = textarea.data().separator;
        var oldValue = input.data('oldValue');
        var newValue = input.val();
        // Update the oldValue data with the newValue, for the suggest inputs.
        input.data('oldValue', newValue);
        var propertyPairValue = input.siblings('input').val();
        if (oldValue === '' &amp;&amp; propertyPairValue === '') {
          if (newValue !== '') {
            // Create new property.
            if (input.hasClass('key')) {
              content = content + separator + newValue + '=' + separator;
            } else {
              content = content + separator + '=' + newValue + separator;
            }
          }
        } else {
          // Update existing property.
          var oldContentToUpdate = '';
          var newContentToUpdate = '';
          if (input.hasClass('key')) {
            propertyPairValue = propertyPairValue.replaceAll('\\', '\\\\');
            oldContentToUpdate = oldValue + '=' + propertyPairValue;
            newContentToUpdate = newValue + '=' + propertyPairValue;
          } else {
            oldContentToUpdate = propertyPairValue + '=' + oldValue.replaceAll('\\', '\\\\');
            newContentToUpdate = propertyPairValue + '=' + newValue.replaceAll('\\', '\\\\');
          }
          var separatedOldContent = separator + oldContentToUpdate + separator;
          var separatedNewContent = separator + newContentToUpdate + separator;
          if (content.includes(separatedOldContent)) {
            content = content.replace(separatedOldContent, separatedNewContent).replace(separator + separator, separator);
          } else {
            // A particular case for the pairs from the beginning and the end of the mapping.
            content = content.replace(oldContentToUpdate, newContentToUpdate);
          }
        }
        // Delete the leftover separator from a cleared mapping, from the end.
        if(content.endsWith(separator + '=')) {
          content = content.substr(0, content.length - 2);
        }
        // Delete the leftover separator from a cleared mapping, from the beginning.
        if (content.startsWith('=' + separator)) {
          content = content.substr(2, content.length);
        }
        textarea.text(content);
      };

      var removeValueFromTextarea = function(property) {
        var propertiesParent = property.parent();
        var textarea = propertiesParent.siblings('textarea');
        var content = textarea.val();
        var separator = textarea.data().separator;
        var contentToRemove = property.children('.key').val() + '=' + property.children('.value').val().replaceAll('\\', '\\\\');
        content = content.replace(contentToRemove, '').replace(separator + separator, separator);
        textarea.text(content);
      };

      var loadPropertiesEditor = function() {
        var fieldMapping = $('#XWiki\\.XWikiPreferences_0_ldap_fields_mapping');
        fieldMapping.attr({
          'data-key-tip'  : "${escapetool.javascript($services.localization.render('activeDirectory.xWikiUserProperty.placeholder'))}",
          'data-value-tip': "${escapetool.javascript($services.localization.render('activeDirectory.aDUserField.placeholder'))}",
          'data-separator': ',',
          'data-mapping-tip' : 'field'
        });
        var groupMapping = $('#XWiki\\.XWikiPreferences_0_ldap_group_mapping');
        groupMapping.attr({
          'data-key-tip'  : "${escapetool.javascript($services.localization.render('activeDirectory.xWikiGroup.placeholder'))}",
          'data-value-tip': "${escapetool.javascript($services.localization.render('activeDirectory.aDGroup.placehoder'))}",
          'data-separator': '|',
          'data-mapping-tip' : 'group'
        });
        $.each([fieldMapping, groupMapping], function() {
          textareaToInputList(this);
        });
        bindPropertyEvents();
      };

      var checkConnection = function() {
        $('#checkConnection button').click(function(event) {
          // For multiple checks, clear the response first.
          $('#checkConnectionResponse').empty();
          event.preventDefault();
          var connectionData = $('.activeDirectoryConnection input').serializeArray();
          $.post({
            url : new XWiki.Document('Actions', 'ActiveDirectory.Code').getURL('get', 'checkConnection=true'),
            data: $.param(connectionData),
            beforeSend: function() {
              // Save the form data introduced by the user upon the Check connection step.
              var adForm = $('#activedirectory_XWiki\\.XWikiPreferences');
              $.post({
                url: adForm.attr('action'),
                data: adForm.find('.activeDirectoryConnection,input[type=hidden]').serialize()
              });
            }
          }).done(function(data) {
            $('#checkConnectionResponse').html(data);
          }).fail(function(data) {
            $('#checkConnectionResponse').html(data.responseText);
            $('#checkConnectionResponse .xwikirenderingerror').click(function() {
              $(this).siblings('.xwikirenderingerrordescription').toggleClass('hidden');
            });
          });
        });
      };

      var toggleAdvancedConfiguration = function() {
        // Toggle Show/Hide advanced configuration buttons
        var show = $('#advancedConfigShow');
        var hide = $('#advancedConfigHide');
        var dl = $('.activeDirectoryConfigurationAdvanced dl');
        show.click(function(event) {
          event.preventDefault();
          dl.show();
          $(this).hide();
          hide.show();
        });
        hide.click(function(event) {
          event.preventDefault();
          dl.hide();
          $(this).hide();
          show.show();
        });
      };

      var resetGroupCache = function() {
        // Reset Group Cache.
        var resetGroupCache = $('#resetGroupCache');
        var resetGroupCacheSuccess = resetGroupCache.siblings('.successmessage');
        resetGroupCache.click(function() {
          $.post({
            url : new XWiki.Document('Actions', 'ActiveDirectory.Code').getURL('get', 'outputSyntax=plain&amp;resetGroupCache=true'),
            success: function(data) {
              resetGroupCacheSuccess.html(data.message);
              resetGroupCacheSuccess.removeClass('hidden');
            }
          });
        });
      };
      return {
        loadPropertiesEditor: loadPropertiesEditor,
        checkConnection: checkConnection,
        toggleAdvancedConfiguration: toggleAdvancedConfiguration,
        resetGroupCache: resetGroupCache
      };
    })();

    feature.checkConnection();
    feature.toggleAdvancedConfiguration();
    feature.loadPropertiesEditor();
    feature.resetGroupCache();

    $('#activedirectory_XWiki\\.XWikiPreferences').submit(function(event) {
      event.preventDefault();
      // Remove the separators from the beginning and the end of the mapping.
      $.each([$('#XWiki\\.XWikiPreferences_0_ldap_fields_mapping'), $('#XWiki\\.XWikiPreferences_0_ldap_group_mapping')], function() {
        var content = this.val();
        var separator = this.data().separator;
        if(content.endsWith(separator)) {
          content = content.substr(0, content.length - 1);
        }
        if(content.startsWith(separator)) {
          content = content.substr(1, content.length);
        }
        this.text(content);
      });
      $(this).unbind('submit').submit();
    });
  });
});</code>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>ActiveDirectory.Code.Main</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>36db244f-b40f-45c6-ac53-6d6a262c86a1</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <restricted>0</restricted>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>div.property span.removeProperty {
  display: inline-block;
  min-height: 30px;
  min-width: 20px;
  background:url($xwiki.getSkinFile('icons/silk/cross.png')) no-repeat scroll 4px 15px transparent;
  cursor:pointer;
}

span.addProperty {
  font-size: 0.8em;
  background:url($xwiki.getSkinFile('icons/silk/add.png')) no-repeat scroll 0 0 transparent;
  padding-left:20px;
  display:inline-block;
  line-height:20px;
  min-height:20px;
  margin-top:5px;
  cursor:pointer;
}

.property input[type='text'] {
  width: 45%;
}

.activeDirectoryConfigurationAdvanced dl {
  display: none;
}
#XWiki\.XWikiPreferences_0_ldap_group_mapping,
#XWiki\.XWikiPreferences_0_ldap_fields_mapping {
  display: none;
}

#advancedConfigShow, #advancedConfigHide {
  margin-left: 20px;
  font-size: 16px;
  cursor: pointer;
}

#advancedConfigHide {
  display: none;
}
.activeDirectoryConfigurationAdvanced {
  padding-bottom: 20px;
}
#checkConnection .xwikirenderingerror {
  cursor: pointer;
}</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
